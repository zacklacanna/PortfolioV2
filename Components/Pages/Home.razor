@using ZackV2.Components.Layout
@using ZackV2.Services
@inject TabService tabs
@page "/"

<PageTitle>Zack LaCanna</PageTitle>

<div class="content">
    <div id="@CurrentSection.Id"
         @key="@CurrentSection.Id"
         class="@($"section-content {CurrentSection.Id} {animationClass}")">
        @CurrentSection.Fragment
    </div>

    <div class="navigation-controls">
        @if (CanGoBack)
        {
            <button class="nav-btn" @onclick="GoBack">
                <div class="icon-circle">
                    <i class="fa-solid fa-arrow-left"></i>
                </div>
            </button>
            
            
        }
        @if (CanGoNext)
        {
            <button class="nav-btn" @onclick="GoNext">
                <div class="icon-circle">
                    <i class="fa-solid fa-arrow-right"></i>
                </div>
            </button>
        }
    </div>
</div>

@code {

    [Parameter]
    public EventCallback<string> OnSectionChanged { get; set; }
    private string animationClass = string.Empty;
    
    private int currentIndex = 0;
    private string activeTab = string.Empty;
    
    private bool CanGoBack => currentIndex > 0;
    private bool CanGoNext => currentIndex < sections.Length - 1;
    private (string Id, RenderFragment Fragment) CurrentSection => sections[currentIndex];
    
    private readonly (string Id, RenderFragment Fragment)[] sections = new (string Id, RenderFragment)[]
    {
        ("about", @<AboutMe />),
        ("experience", @<Experience />),
        ("projects", @<Projects />),
        ("contact", @<ContactMe />)
    };

    private bool inAnimation = false;
    private async Task AnimateSwitch(int newIndex)
    {
        if (inAnimation) return;
        inAnimation = true;

        bool forward = newIndex > currentIndex;
        animationClass = forward ? "exit-left" : "exit-right";
        await InvokeAsync(StateHasChanged);
        await Task.Delay(300);

        currentIndex = newIndex;
        tabs.SetTab(sections[newIndex].Id);  // sync Topbar

        animationClass = forward ? "enter-right" : "enter-left";
        await InvokeAsync(StateHasChanged);
        await Task.Delay(50);

        animationClass = "enter-active";
        await InvokeAsync(StateHasChanged);
        await Task.Delay(100);

        animationClass = string.Empty;
        await InvokeAsync(StateHasChanged);

        inAnimation = false;
    }

    private Task GoNext() => AnimateSwitch(currentIndex + 1);
    private Task GoBack() => AnimateSwitch(currentIndex - 1);
    
    protected override void OnInitialized()
    {
        // 1) start at the service's current tab
        currentIndex = Array.FindIndex(sections, s => s.Id == tabs.CurrentTab);
        if (currentIndex < 0) currentIndex = 0;

        // 2) listen for Topbar clicks
        tabs.OnTabChanged += OnTabChanged;
    }
    
    private async void OnTabChanged(string tabId)
    {
        var newIndex = Array.FindIndex(sections, s => s.Id == tabId);
        if (newIndex >= 0 && newIndex != currentIndex)
            await AnimateSwitch(newIndex);
    }

    public void Dispose()
    {
        // must remove the same handler reference
        tabs.OnTabChanged -= OnTabChanged;
    }
}
