@using ZackV2.Components.Layout

@page "/"

<PageTitle>Zack LaCanna</PageTitle>

<div class="content">
    <div id="@CurrentSection.Id"
         class="@($"section-content {CurrentSection.Id} {animationClass}")">
        @CurrentSection.Fragment
    </div>

    <div class="navigation-controls">
        @if (CanGoBack)
        {
            <button class="nav-btn" @onclick="GoBack">
                <div class="icon-circle">
                    <i class="fa-solid fa-arrow-left"></i>
                </div>
            </button>
        }
        @if (CanGoNext)
        {
            <button class="nav-btn" @onclick="GoNext">
                <div class="icon-circle">
                    <i class="fa-solid fa-arrow-right"></i>
                </div>
            </button>
        }
    </div>
</div>

@code {

    [Parameter]
    public EventCallback<string> OnSectionChanged { get; set; }
    private string animationClass = string.Empty;
    
    private int currentIndex = 0;
    
    private bool CanGoBack => currentIndex > 0;
    private bool CanGoNext => currentIndex < sections.Length - 1;
    private (string Id, RenderFragment Fragment) CurrentSection => sections[currentIndex];
    
    private readonly (string Id, RenderFragment Fragment)[] sections = new (string Id, RenderFragment)[]
    {
        ("about", @<AboutMe />),
        ("experience", @<Experience />),
        ("projects", @<Projects />),
        ("contact", @<ContactMe />)
    };

    private bool inAnimation = false;
    private async Task AnimateSwitch(int newIndex)
    {
        if (inAnimation)
            return;

        inAnimation = true;
        
        bool forward = newIndex > currentIndex;

        // Exit animation based on direction
        animationClass = forward ? "exit-left" : "exit-right";
        StateHasChanged();
        await Task.Delay(300);

        // Change content
        currentIndex = newIndex;
        await OnSectionChanged.InvokeAsync(CurrentSection.Id);

        // Enter animation based on direction
        animationClass = forward ? "enter-right" : "enter-left";
        StateHasChanged();
        await Task.Delay(50);
        animationClass = "enter-active";
        StateHasChanged();
        await Task.Delay(300);

        // Clear animation classes
        animationClass = string.Empty;
        StateHasChanged();

        inAnimation = false;
    }

    private Task GoNext() => AnimateSwitch(currentIndex + 1);
    private Task GoBack() => AnimateSwitch(currentIndex - 1);
}
