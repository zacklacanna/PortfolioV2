@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Mvc.TagHelpers
<!DOCTYPE html>
<html lang="en">

@{
    var version = "2.2.4";
}


<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="/"/>
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css"/>
    <link rel="stylesheet" href="app.css?v=@version"/>
    <link rel="stylesheet" href="ZackV2.styles.css?v=@version"/>
    <link rel="icon" type="image/x-icon" href="favicon.ico" />
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap" rel="stylesheet">
    <HeadOutlet/>
</head>

<body>
    <Routes @rendermode=RenderMode.InteractiveServer />
    <script src="https://kit.fontawesome.com/b235c568eb.js" crossorigin="anonymous"></script>
    <script src="_framework/blazor.web.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Configuration
            const SCROLL_OFFSET = 100;
            const THROTTLE_DELAY = 50;

            // Get the custom scroll container
            const scrollContainer = document.querySelector('.page');
            if (!scrollContainer) {
                console.error('Scroll container .page not found');
                return;
            }

            // Get navigation links and sections
            const links = document.querySelectorAll('.topbar .nav-links a[href^="#"]');

            // Get unique sections (avoid duplicates)
            const allSections = document.querySelectorAll('[id]');
            const sections = [];
            const seenIds = new Set();

            allSections.forEach(el => {
                if (el.id && ['about', 'experience', 'projects', 'contact'].includes(el.id) && !seenIds.has(el.id)) {
                    sections.push(el);
                    seenIds.add(el.id);
                }
            });

            console.log('Found sections:', sections.map(s => s.id));

            let isScrolling = false;
            let scrollTimeout;

            // Update active navigation link
            function updateActiveLink(activeId) {
                links.forEach(link => {
                    const href = link.getAttribute('href');
                    if (href === `#${activeId}`) {
                        link.classList.add('active');
                    } else {
                        link.classList.remove('active');
                    }
                });
            }

            // Update URL hash without triggering scroll
            function updateUrlHash(hash) {
                if (window.location.hash !== hash) {
                    const newUrl = window.location.pathname + window.location.search + hash;
                    window.history.replaceState(null, null, newUrl);
                }
            }

            // Find current section based on scroll position in .page container
            function getCurrentSection() {
                const containerRect = scrollContainer.getBoundingClientRect();
                const scrollTop = scrollContainer.scrollTop;

                // If we're at the very top, return first section
                if (scrollTop < 50) {
                    return sections[0]?.id || '';
                }

                let currentId = '';
                let maxVisibleArea = 0;

                sections.forEach(section => {
                    const rect = section.getBoundingClientRect();
                    const containerTop = containerRect.top;
                    const containerBottom = containerRect.bottom;

                    // Calculate visible area within the scroll container
                    const visibleTop = Math.max(0, containerTop - rect.top);
                    const visibleBottom = Math.min(rect.height, containerBottom - rect.top);
                    const visibleArea = Math.max(0, visibleBottom - visibleTop);

                    // If this section has more visible area, make it current
                    if (visibleArea > maxVisibleArea) {
                        maxVisibleArea = visibleArea;
                        currentId = section.id;
                    }
                });

                return currentId;
            }

            // Main scroll handler
            function handleScroll() {
                if (isScrolling) return;

                const currentId = getCurrentSection();

                if (currentId) {
                    updateActiveLink(currentId);
                    updateUrlHash(`#${currentId}`);
                }
            }

            // Throttled scroll handler
            function throttledScroll() {
                if (scrollTimeout) {
                    clearTimeout(scrollTimeout);
                }

                scrollTimeout = setTimeout(() => {
                    handleScroll();
                }, THROTTLE_DELAY);
            }

            // Handle navigation link clicks
            links.forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();

                    const href = link.getAttribute('href');
                    const targetId = href.substring(1);
                    const target = document.getElementById(targetId);

                    if (!target) return;

                    // Set scrolling flag to prevent scroll handler interference
                    isScrolling = true;

                    // Update active state immediately
                    updateActiveLink(targetId);
                    updateUrlHash(href);

                    // Calculate scroll position relative to the .page container
                    const containerRect = scrollContainer.getBoundingClientRect();
                    const targetRect = target.getBoundingClientRect();
                    const scrollTop = scrollContainer.scrollTop;

                    // Calculate target position within the scroll container
                    const targetPosition = scrollTop + (targetRect.top - containerRect.top) - 80;

                    // Smooth scroll within the .page container
                    scrollContainer.scrollTo({
                        top: targetPosition,
                        behavior: 'smooth'
                    });

                    // Reset scrolling flag after scroll completes
                    setTimeout(() => {
                        isScrolling = false;
                    }, 1000);
                });
            });

            // Event listeners - listen to .page container scroll, not window
            scrollContainer.addEventListener('scroll', throttledScroll, { passive: true });

            // Handle initial page load with hash
            window.addEventListener('load', () => {
                const hash = window.location.hash;
                if (hash) {
                    const targetId = hash.substring(1);
                    const target = document.getElementById(targetId);
                    if (target) {
                        updateActiveLink(targetId);
                        setTimeout(() => {
                            const containerRect = scrollContainer.getBoundingClientRect();
                            const targetRect = target.getBoundingClientRect();
                            const scrollTop = scrollContainer.scrollTop;
                            const targetPosition = scrollTop + (targetRect.top - containerRect.top) - 80;

                            scrollContainer.scrollTo({
                                top: targetPosition,
                                behavior: 'smooth'
                            });
                        }, 100);
                    }
                } else {
                    handleScroll();
                }
            });

            // Handle browser back/forward buttons
            window.addEventListener('popstate', () => {
                const hash = window.location.hash;
                if (hash) {
                    const targetId = hash.substring(1);
                    const target = document.getElementById(targetId);
                    if (target) {
                        updateActiveLink(targetId);

                        const containerRect = scrollContainer.getBoundingClientRect();
                        const targetRect = target.getBoundingClientRect();
                        const scrollTop = scrollContainer.scrollTop;
                        const targetPosition = scrollTop + (targetRect.top - containerRect.top) - 80;

                        scrollContainer.scrollTo({
                            top: targetPosition,
                            behavior: 'smooth'
                        });
                    }
                }
            });

            // Initial setup
            setTimeout(() => {
                handleScroll();
            }, 100);
        });
    </script>
</body>

</html>